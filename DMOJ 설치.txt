주의, Ubuntu 20.04 이상에서 작동

<사용자 추가용>
$ sudo useradd dmoj
$ sudo gpasswd -a dmoj sudo


<Mariadb의 저장소 추가>
https://downloads.mariadb.org/mariadb/repositories/
모두 선택을 마쳤으면 화면 하단의 Here are the commands to run to install MariaDB 10.x from the MariaDB repository on your Ubuntusystem: 에 추가적으로 나와있는 명령어입니다
sudo apt-get install software-properties-common
sudo apt-key adv --fetch-keys 'https://mariadb.org/mariadb_release_signing_key.asc'
sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] https://ftp.harukasan.org/mariadb/repo/10.5/ubuntu focal main'

$ sudo apt update -y
$ sudo apt upgrade -y
$ sudo apt install mariadb-server


<필요한 패키지 다운로드>
$ sudo apt install -y python-is-python3 python3-venv
$ sudo apt install -y git gcc g++ make python3-dev libxml2-dev libxslt1-dev zlib1g-dev gettext curl python3-pip mariadb-server libmysqlclient-dev supervisor nginx redis-server


<Nodejs 의 다운로드 및 설치>
$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
$ sudo apt install -y nodejs
$ sudo npm install -g sass postcss postcss-cli autoprefixer


<데이터베이스 설정>
https://github.com/kitakaze0804/DMOJ-Setup/blob/master/site-setup.md

$ sudo service mysql start
$ sudo mysql -uroot -p
다음으로 2개의 명령어로 dmoj 데이터베이스를 등록하고 종료한다.(세미콜론으로 나누어 입력)
MariaDB> CREATE DATABASE dmoj DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci;
MariaDB> GRANT ALL PRIVILEGES ON dmoj.* to 'dmoj'@'localhost' IDENTIFIED BY 'dmoj';
MariaDB> exit


<Site의 소스 코드를 다운로드>
홈 디렉토리 바로 밑에 dmoj라고 하는 폴더를 만들고 그 밑에서 작업을 합니다.
$ mkdir ~/dmoj
$ cd ~/dmoj
$ git clone https://github.com/DMOJ/online-judge.git site
$ cd site/       #online-judge
$ git checkout v2.1.0
$ git submodule init  
$ git submodule update


<문제를 저장할 폴더 작성>
여기서 문제를 저장하는 폴더도 만들어 줍니다.
$ mkdir ~/dmoj/problems

<설정 파일에 대한>
이하의 파일을 다운로드해서, ~/dmoj/site 바로 아래에 보존해 주세요.

site.conf
bridged.conf
uwsgi.ini
nginx.conf
config.js
wsevent.conf
celery.conf

또한 local_settings.py를 ~/dmoj/site/dmoj/에 배치하고, 파일의 username 부분을 자신의 사용자 이름으로 변경하십시오.*

49:  DMOJ_PROBLEM_DATA_ROOT = '/home/username/dmoj/problems'
124: STATIC_ROOT = '/home/username/dmoj/site/static'


<모듈설치>
다음은 모듈을 설치합니다.반드시 sudo에서 실행하는 것과, pip이 아닌, pip3를 쓰도록 하자.
$ sudo pip3 install -r requirements.txt
$ sudo pip3 install mysqlclient websocket-client
$ python3 manage.py check    #마지막 명령어는 sudo를 켜지 않고 실행합니다.오류가 나지 않으면 성공입니다.


<사이트의 컴파일>
먼저 아래 명령에 따라 src 폴더의 쓰기 권한을 변경합니다.(오류 대책)
$ sudo chmod -R 777 src/

다음으로 다음과 같은 명령어로 스타일 시트를 컴파일합니다.
./make_style.sh 
$ python3 manage.py collectstatic
$ python3 manage.py compilemessages
$ python3 manage.py compilejsi18n


<데이터베이스 테이블 설치>
미리 설정한 데이터베이스에 쓰기를 사용합니다.
$ python3 manage.py migrate
$ python3 manage.py loaddata navbar
$ python3 manage.py loaddata language_small
$ python3 manage.py loaddata demo


<uWSGI 설치>
#site.conf, bridged.conf의 사용자명 username 부분을 자신의 사용자명으로 바꿔 쓰십시오.

site.conf
2:  command=uwsgi --ini /home/username/dmoj/site/uwsgi.ini
3:  directory=/home/username/dmoj/site

bridged.conf
3:  directory=/home/username/dmoj/site

uwsgi.ini
12: chdir = /home/username/dmoj/site

uwsgi를 설치하고 설정 파일을 복사합니다.
$ sudo pip3 install uwsgi
$ sudo cp site.conf bridged.conf /etc/supervisor/conf.d/


<nginx 설치>
아래 명령에 /etc/nginx/sites-enabled에 배치하려면 아래 명령에 따라 아래 부분을 수정합니다. 그 경로에는 default라는 파일이 있기 때문에 이번에는 파일 이름을 default로, 덮어쓰고 복사하고 있습니다.
21: root /home/username/dmoj/site;
25: root /home/username/dmoj/site/resources/icons;
40: root /home/username/dmoj/site;

$ sudo cp nginx.conf /etc/nginx/sites-enabled/default
$ sudo service nginx reload

nginx 서비스를 재시작하여 오류가 없으면 성공입니다


<이벤트 서버 구축>
#Websocket 폴더에 config.js를 배치하고 필요한 패키지를 설치합니다.
$ cp config.js websocket/
$ sudo npm install qu ws simplesets

#또한, 다음 부분을 수정한 wsevent.conf를 supervisor로 복사합니다.
2:  command=/usr/bin/node /home/username/dmoj/site/websocket/daemon.js
3:  environment=NODE_PATH="/home/username/dmoj/site/node_modules"

$ sudo cp wsevent.conf /etc/supervisor/conf.d/


<Supervisord의 업데이트>
#아래 명령에서 supervisord를 업데이트하고 정상적으로 작동하는지 확인합니다.
$ sudo supervisorctl update
$ sudo supervisorctl status     #status가 RUNNING으로 되어 있으면 정상입니다.


<관리자 사용자 생성>
#관리자 사용자를 만듭니다.메일주소는 비어있으면 됩니다. 그 후 Supervisor와 Nginx를 재시작합니다.
$ python3 manage.py createsuperuser
$ sudo service nginx restart
$ sudo supervisorctl reload


<Celery의 부팅>
#Celery가 새로 사용되기 시작했어요. 
#다음 명령에 따라 정상적으로 작동하는지 확인합니다. Warning은 무시할 수 있습니다. (Ctrl+C : 명령을 중단할 때)
$ sudo service redis-server start
$ celery -A dmoj_celery worker

만일 위의 명령어로 에러가 난다면 아래의 모듈을 설치해 주십시오.
$ sudo pip3 install django-redis

#동작 확인이 되면 celery.conf의 username을 변경하고 supervisord의 폴더에 복사합니다.
3:  directory=/home/username/dmoj/site

$ sudo cp celery.conf /etc/supervisor/conf.d/
$ sudo supervisorctl reload


<사이트의 확인>
web 브라우저를 열고 주소창에 http://localhost (127.0.0.1과 동일)라고 입력합니다.사이트가 뜨면 성공! 관리자 유저로 로그인할 수 있는 것을 확인해 주세요.